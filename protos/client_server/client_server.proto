syntax = "proto3";
package video;

service ClientServerService {
  rpc Stream(stream ClientServerMessage) returns (stream ServerClientMessage);
}

message ClientServerMessage {
  oneof payload {
    ClientServerStart client_server_start = 1;
    ClientServerStop client_server_stop = 2;
    ClientServerPause client_server_pause = 3;
    ClientServerUnpause client_server_unpause = 4;
    ClientServerSource client_server_source = 5;

    ClientServerStatusAnswer client_server_status_answer = 6;

    ClientServerUploadStart client_server_upload_start = 7;
    ClientServerUploadChunk client_server_upload_chunk = 8;
    ClientServerUploadEnd client_server_upload_end = 9;
  }
}

message ClientServerStart {
  
}

message ClientServerStop {

}

message ClientServerPause {
  string frame_id = 1;
}

message ClientServerUnpause {
  string frame_id = 1;
}

message ClientServerSource {
  string source = 1;
}

message ClientServerStatusAnswer {
  string frame_id = 1;
}

message ClientServerUploadStart {

}

message ClientServerUploadChunk {
  bytes chunk = 1;
}

message ClientServerUploadEnd {
  string filename = 1;
}

message ServerClientMessage {
  oneof payload {
    ServerClientInfo server_client_info = 1;
    ServerClientSegment server_client_segment = 2;
    
    ServerClientPause server_client_pause = 3;
    ServerClientUnpause server_client_unpause = 4;

    ServerClientNewSource server_client_new_source = 5;
    ServerClientClearInfo server_client_clear_info = 6;
    
    ServerClientStatusRequest server_client_status_request = 7;

    ServerClientHeartbeat server_client_heartbeat = 8;
  }
}

message ServerClientInfo {
  string info = 1;
}

message ServerClientSegment {
  bytes segment = 1;
}

message ServerClientPause {
  string frame_id = 1;
}

message ServerClientUnpause {
  string frame_id = 1;
}

message ServerUnpauseRequest {
  string frame_id = 1;
}

message ServerClientNewSource {
  string filename = 1;
}

message ServerClientClearInfo {
  
}

message ServerClientStatusRequest {
  
}

message ServerClientHeartbeat {

}