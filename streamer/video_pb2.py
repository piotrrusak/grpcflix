# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# NO CHECKED-IN PROTOBUF GENCODE
# source: video.proto
# Protobuf Python Version: 5.29.0
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import runtime_version as _runtime_version
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
_runtime_version.ValidateProtobufRuntimeVersion(
    _runtime_version.Domain.PUBLIC,
    5,
    29,
    0,
    '',
    'video.proto'
)
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x0bvideo.proto\x12\x05video\"d\n\rClientMessage\x12$\n\x05start\x18\x01 \x01(\x0b\x32\x13.video.StartRequestH\x00\x12\"\n\x04stop\x18\x02 \x01(\x0b\x32\x12.video.StopRequestH\x00\x42\t\n\x07payload\"!\n\x0cStartRequest\x12\x11\n\ttimestamp\x18\x01 \x01(\t\"\x1d\n\x0bStopRequest\x12\x0e\n\x06reason\x18\x01 \x01(\t\"\x1c\n\nVideoChunk\x12\x0e\n\x06\x66rames\x18\x01 \x01(\x0c\x32\x45\n\x0cVideoService\x12\x35\n\x06Stream\x12\x14.video.ClientMessage\x1a\x11.video.VideoChunk(\x01\x30\x01\x62\x06proto3')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'video_pb2', _globals)
if not _descriptor._USE_C_DESCRIPTORS:
  DESCRIPTOR._loaded_options = None
  _globals['_CLIENTMESSAGE']._serialized_start=22
  _globals['_CLIENTMESSAGE']._serialized_end=122
  _globals['_STARTREQUEST']._serialized_start=124
  _globals['_STARTREQUEST']._serialized_end=157
  _globals['_STOPREQUEST']._serialized_start=159
  _globals['_STOPREQUEST']._serialized_end=188
  _globals['_VIDEOCHUNK']._serialized_start=190
  _globals['_VIDEOCHUNK']._serialized_end=218
  _globals['_VIDEOSERVICE']._serialized_start=220
  _globals['_VIDEOSERVICE']._serialized_end=289
# @@protoc_insertion_point(module_scope)
